#!/usr/bin/env node

/**
 * Comprehensive test for deployed backend and frontend integration
 */

console.log('üöÄ TESTING DEPLOYED BACKEND INTEGRATION');
console.log('=' .repeat(70));

const DEPLOYED_API_URL = 'https://jyotaishya-hylyg8i4x-ranveer-singh-rajputs-projects.vercel.app/api';

async function testDeployedAPI() {
  console.log('\nüìã Testing Deployed API Endpoints');
  console.log('-'.repeat(50));
  console.log('API URL:', DEPLOYED_API_URL);
  
  try {
    const fetch = (await import('node-fetch')).default;
    
    // Test 1: Health endpoint
    console.log('\nüîÑ Testing health endpoint...');
    try {
      const healthResponse = await fetch(`${DEPLOYED_API_URL}/health`, {
        method: 'GET',
        timeout: 30000
      });
      
      console.log('Health Status:', healthResponse.status);
      
      if (healthResponse.ok) {
        const healthData = await healthResponse.json();
        console.log('‚úÖ Health Check: SUCCESS');
        console.log('   Message:', healthData.message);
        console.log('   Success:', healthData.success);
      } else {
        console.log('‚ùå Health Check: FAILED');
        console.log('   Status:', healthResponse.status);
        const errorText = await healthResponse.text();
        console.log('   Response:', errorText.substring(0, 200));
      }
    } catch (healthError) {
      console.log('‚ùå Health Check: ERROR');
      console.log('   Error:', healthError.message);
    }
    
    // Test 2: Kundali generation endpoint
    console.log('\nüîÑ Testing kundali generation endpoint...');
    const testData = {
      name: 'Deployed Backend Test',
      birthDate: '1990-05-15',
      birthTime: '14:30',
      birthPlace: 'New Delhi, India'
    };
    
    console.log('   Test data:', testData);
    
    try {
      const kundaliResponse = await fetch(`${DEPLOYED_API_URL}/kundali/generate`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(testData),
        timeout: 60000
      });
      
      console.log('Kundali Status:', kundaliResponse.status);
      
      if (kundaliResponse.ok) {
        const kundaliData = await kundaliResponse.json();
        console.log('‚úÖ Kundali Generation: SUCCESS');
        console.log('   Response Success:', kundaliData.success);
        console.log('   Name:', kundaliData.data?.name);
        console.log('   Planets Count:', kundaliData.data?.planets?.length);
        console.log('   Ascendant:', kundaliData.data?.ascendant?.rashiName?.english || kundaliData.data?.ascendant?.rashiName);
        console.log('   Has Doshas:', !!kundaliData.data?.doshas);
        console.log('   Has Dasha Periods:', !!kundaliData.data?.dashaPeriods);
        
        return {
          health: true,
          kundali: true,
          apiUrl: DEPLOYED_API_URL
        };
      } else {
        console.log('‚ùå Kundali Generation: FAILED');
        console.log('   Status:', kundaliResponse.status);
        const errorText = await kundaliResponse.text();
        console.log('   Response:', errorText.substring(0, 200));
        
        return {
          health: true,
          kundali: false,
          apiUrl: DEPLOYED_API_URL
        };
      }
    } catch (kundaliError) {
      console.log('‚ùå Kundali Generation: ERROR');
      console.log('   Error:', kundaliError.message);
      
      return {
        health: true,
        kundali: false,
        apiUrl: DEPLOYED_API_URL
      };
    }
    
  } catch (error) {
    console.log('‚ùå API Test: CRITICAL ERROR');
    console.log('   Error:', error.message);
    
    return {
      health: false,
      kundali: false,
      apiUrl: DEPLOYED_API_URL
    };
  }
}

async function testFrontendConfiguration() {
  console.log('\nüìã Testing Frontend API Configuration');
  console.log('-'.repeat(50));
  
  try {
    // Import the frontend API configuration
    const apiModule = await import('./client/src/utils/api.ts');
    
    console.log('‚úÖ Frontend API module imported successfully');
    console.log('   Configured API URL:', apiModule.API_URL);
    
    // Check if the API URL matches our deployed URL
    const expectedUrl = DEPLOYED_API_URL;
    const configuredUrl = apiModule.API_URL;
    
    if (configuredUrl === expectedUrl) {
      console.log('‚úÖ Frontend API URL: CORRECTLY CONFIGURED');
      console.log('   Frontend will use deployed backend');
      return true;
    } else {
      console.log('‚ö†Ô∏è Frontend API URL: MISMATCH');
      console.log('   Expected:', expectedUrl);
      console.log('   Configured:', configuredUrl);
      console.log('   Frontend may not connect to deployed backend');
      return false;
    }
    
  } catch (error) {
    console.log('‚ùå Frontend Configuration Test: FAILED');
    console.log('   Error:', error.message);
    return false;
  }
}

async function generateDeploymentReport(apiResults, frontendResults) {
  console.log('\n' + '='.repeat(70));
  console.log('üìä DEPLOYMENT INTEGRATION REPORT');
  console.log('='.repeat(70));
  
  console.log('\nüåê Backend Deployment Status:');
  console.log('   API URL:', apiResults.apiUrl);
  console.log('   Health Endpoint:', apiResults.health ? '‚úÖ WORKING' : '‚ùå FAILED');
  console.log('   Kundali Endpoint:', apiResults.kundali ? '‚úÖ WORKING' : '‚ùå FAILED');
  
  console.log('\nüñ•Ô∏è Frontend Configuration:');
  console.log('   API Configuration:', frontendResults ? '‚úÖ CORRECT' : '‚ö†Ô∏è NEEDS UPDATE');
  
  const overallStatus = apiResults.health && apiResults.kundali && frontendResults;
  
  console.log('\nüéØ Overall Integration Status:');
  if (overallStatus) {
    console.log('   ‚úÖ FULLY INTEGRATED AND READY');
    console.log('   üéâ Frontend can access deployed backend');
    console.log('   üöÄ No local backend required');
    console.log('   üåç Application accessible from anywhere');
  } else {
    console.log('   ‚ö†Ô∏è INTEGRATION ISSUES DETECTED');
    
    if (!apiResults.health || !apiResults.kundali) {
      console.log('   üîß Backend deployment needs fixing');
    }
    
    if (!frontendResults) {
      console.log('   üîß Frontend API configuration needs updating');
    }
  }
  
  console.log('\nüìã Next Steps:');
  if (overallStatus) {
    console.log('   1. ‚úÖ Backend successfully deployed to Vercel');
    console.log('   2. ‚úÖ Frontend configured to use deployed backend');
    console.log('   3. üéØ Test the web application in browser');
    console.log('   4. üöÄ Deploy frontend to production if needed');
  } else {
    console.log('   1. üîß Fix backend deployment issues');
    console.log('   2. üîß Update frontend API configuration');
    console.log('   3. üß™ Re-test integration');
  }
  
  console.log('\nüåê Deployed API Endpoints:');
  console.log(`   Health: ${apiResults.apiUrl}/health`);
  console.log(`   Kundali: ${apiResults.apiUrl}/kundali/generate`);
  
  return overallStatus;
}

// Main execution
async function runDeploymentTests() {
  console.log('üöÄ Starting deployment integration tests...\n');
  
  try {
    // Test deployed API
    const apiResults = await testDeployedAPI();
    
    // Test frontend configuration
    const frontendResults = await testFrontendConfiguration();
    
    // Generate comprehensive report
    const success = await generateDeploymentReport(apiResults, frontendResults);
    
    process.exit(success ? 0 : 1);
    
  } catch (error) {
    console.error('\nüí• CRITICAL ERROR:', error.message);
    process.exit(1);
  }
}

// Run the tests
runDeploymentTests();
